import Image
import numpy as np

def imgToBW(img, threshold, image=False):
	width, height = img.size
	imgBW = np.asarray(img.convert("L"))

	result = np.ones((height, width), dtype=np.uint8)

	for row in range(height):
		for col in range(width):
			if imgBW[row][col] > threshold:
				result[row][col] = 0xFF
			else:
				result[row][col] = 0x00
	if image:
		return Image.fromarray(result)
	return result

actualManas = [0, 0, 1, 1, 1, 2, 2, 2,
               2, 2, 2, 2, 2, 2, 3, 3,
               3, 3, 3, 3, 4, 4, 4, 4,
               5, 5, 5, 6, 6, 6, 6, 6,
               7, 7, 8, 9,
               0, 1, 1, 1, 1, 1, 1, 1,
               1, 2, 2, 2, 2, 2, 2, 2,
               2, 2, 2, 2, 2, 2, 2, 2,
               3, 3, 3, 3, 3, 3, 3, 4,
               4, 4, 4, 5, 5, 5, 5, 6,
               7, 9,
               1, 1, 1, 1, 1, 1, 1, 2,
               2, 2, 2, 2, 2, 2, 2, 2,
               3, 3, 3, 3, 3, 3, 3, 3,
               3, 3, 3, 3, 3, 3, 4, 4,
               4, 4, 4, 4, 4, 4, 5, 5,
               5, 6, 6, 7,
               1, 1, 1, 1, 1, 1, 1, 1,
               1, 1, 1, 1, 1, 1, 1, 1,
               2, 2, 2, 2, 2, 2, 3, 3,
               4, 4, 4, 4, 4, 5, 5, 5,
               3, 3, 3, 3, 3, 4, 4, 4,
               5, 5, 6, 7,
               0, 0, 1, 1, 1, 1, 1, 1,
               1, 1, 1, 1, 2, 2, 2, 2,
               2, 2, 2, 2, 2, 2, 3, 3,
               3, 3, 3, 3, 4, 4, 4, 4,
               7, 10,
               4, 4, 4, 5, 5, 5, 6, 6,
               1, 2, 2, 2, 2, 2, 2, 2,
               0, 0, 1, 1, 1, 1, 1, 1,
               2, 2, 2, 2, 2, 2, 2, 3,
               3, 3, 3, 3, 3, 3, 3, 3,
               3, 4, 4, 4, 4, 5, 5, 5,
               5, 5, 5, 6, 6, 7,
               0, 0, 0, 1, 1, 1, 1, 1,
               1, 1, 1, 2, 2, 2, 2, 2,
               2, 2, 2, 2, 2, 2, 3, 3,
               4, 5, 5, 5, 6,
               3, 3, 3, 3, 3, 4, 4, 4,
               0, 0, 1, 1, 1, 1, 1, 1,
               1, 1, 1, 2, 2, 2, 2, 2,
               2, 2, 2, 2, 3, 3, 3, 3,
               3, 3, 3, 4, 4, 4, 4, 4,
               4, 4, 5, 5, 5, 6, 6, 6,
               6, 6, 7, 9,
               0, 1, 1, 1, 1, 2, 2, 2,
               2, 3, 3, 3, 3, 3, 3, 3,
               2, 2, 2, 2, 2, 2, 2, 2,
               3, 4, 4, 4, 4, 4, 4, 5,
               5, 6, 6, 6, 7, 7, 7,
               0, 0, 1, 1, 1, 1, 1, 1,
               1, 1, 1, 1, 1, 1, 1, 1,
               1, 1, 1, 1, 1, 1, 1, 1,
               1, 1, 1, 2, 2, 2, 2, 2,
               2, 2, 2, 2, 2, 2, 2, 2,
               2, 2, 2, 2, 2, 2, 2, 2,
               2, 2, 2, 2, 2, 2, 2, 2,
               2, 2, 2, 2, 2, 2, 2, 2,
               2, 2, 2, 2, 2, 2, 2, 2,
               3, 3, 3, 3, 3, 3, 3, 3,
               3, 3, 3, 3, 3, 3, 3, 3,
               3, 3, 3, 3, 3, 3, 3, 3,
               3, 3, 3, 3, 3, 3, 3, 3,
               3, 3, 3, 3, 3, 3, 3, 3,
               3, 3, 3, 3, 3, 3, 3, 3,
               3, 3, 3, 3, 3, 3, 4, 4,
               4, 4, 4, 4, 4, 4, 4, 4,
               4, 4, 4, 4, 4, 4, 4, 4,
               4, 4, 4, 4, 4, 4, 4, 4,
               4, 4, 4, 4, 4, 4, 4, 4,
               4, 4, 4, 5, 5, 5, 5, 5,
               5, 5, 5, 5, 5, 5, 5, 5,
               5, 5, 5, 5, 5, 5, 5, 5,
               5, 5, 6, 6, 6, 6, 6, 6,
               5, 5, 5, 5, 5, 5, 5, 5,
               6, 6, 6, 6, 6, 6, 6, 6,
               6, 6, 7, 7, 7, 7, 7, 8,
               8, 8, 9, 9, 9, 20]